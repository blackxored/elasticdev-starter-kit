scalar Date
scalar DateTime
scalar Time
scalar Secret

interface Node {
  # A globally-unique ID
  id: ID!
}

interface Timestampable {
  createdAt: DateTime!
  updatedAt: DateTime
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Mutation {
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  inviteUser(input: InviteUserInput!): InviteUserPayload
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  # count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

type User implements Node {
  # A globally-unique ID
  id: ID!
  email: String
  firstName: String
  lastName: String

  # Date of Birth
  dob: Date
  avatar: Avatar
}

type Viewer {
  allUsers(
  before: String, after: String, first: Int, last: Int
): UserConnection!

  user: User
  getUser(id: ID!): User
}

input CreateUserInput {
  username: String!
  password: Secret,

  # An opaque string used by frontend frameworks like relay to track requests and responses.
  clientMutationId: String,
}

type CreateUserPayload {
  # The user's authentication token
  token: String

  # The mutated User.
  changedUser: User

  # An edge containing the mutated User. Use this to update your client side cache.
  changedEdge: UserEdge

  # A view port into your application.
  viewer: Viewer

  # An opaque string used by frontend frameworks like relay to track requests and responses.
  clientMutationId: String
}

input UpdateUserInput {
  firstName: String,
  lastName: String,
  dob: Date,
  avatar: ImageInput,
}

type UpdateUserPayload {
  # The mutated User.
  changedUser: User

  # An opaque string used by frontend frameworks like relay to track requests and responses.
  clientMutationId: String
}

input AuthProviderSignupData {
  email: AuthProviderEmail
}

input AuthProviderEmail {
  email: String!
  password: String!
}

input InviteUserInput {
  inviteToken: String!
  firstName: String!
  lastName: String!
  email: String!
}

type InviteUserPayload {
  inviteToken: String
  invitedUser: User
  changedEdge: UserEdge

  # An opaque string used by frontend frameworks like relay to track requests and responses.
  clientMutationId: String
}

interface File {
  id: ID!
  contentType: String!
  createdAt: DateTime!
  name: String!
  size: Int!
  updatedAt: DateTime
  url: String
}

# TODO: make avatar, image, etc. use/implement this
type GenericFile implements File {
  id: ID!
  contentType: String!
  createdAt: DateTime!
  name: String!
  size: Int!
  updatedAt: DateTime
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int
}

type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileInput {
  name: String!
  contentType: String!
  size: Int!
}

input FileInputBase64 {
  name: String!
  url: String!
  contentType: String!
  size: Int!
}

input FileFilter {
  contentTypeContains: String
}

interface ResizableImage {
  url: String
  width: Int
  height: Int
}

interface Thumbnailable {
  thumb: Image
}

type Image implements File, ResizableImage, Thumbnailable {
  id: ID!
  contentType: String!
  createdAt: DateTime!
  name: String!

  size: Int!
  updatedAt: DateTime
  url: String!

  width: Int
  height: Int
  large: Image
  thumb: Image
}

type Avatar implements File, ResizableImage, Thumbnailable {
  id: ID!
  url: String!
  contentType: String!
  createdAt: DateTime!
  name: String!
  size: Int!
  updatedAt: DateTime

  width: Int
  height: Int
  large: Image
  thumb: Image
}

type Video implements File, Thumbnailable {
  id: ID!
  url: String!
  contentType: String!
  createdAt: DateTime!
  name: String!
  size: Int!
  updatedAt: DateTime
  thumb: Image
  duration: Int
}

type Audio implements File {
  id: ID!
  url: String!
  contentType: String!
  createdAt: DateTime!
  name: String!
  size: Int!
  updatedAt: DateTime
  duration: Int
}

input ImageInput {
  # A Base64-encoded data URI representing the image contents
  url: String
}
